#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct TreeNode {
    int data;
    TreeNode* left, * right;
    TreeNode(int data) {
        this->data = data;
        this->left = this->right = nullptr;
    }
};

struct ListNode {
    int data;
    ListNode* next;
    ListNode() {

    }
    ListNode(int data) {
        this->data = data;
        this->next = nullptr;
    }
};



TreeNode* converListToBinaryTree(ListNode* head) {
    if (head == nullptr)
        return nullptr;

    TreeNode* root = new TreeNode(head->data);
    ListNode* curListNode = head->next;
    queue<TreeNode*> q;
    q.push(root);

    while (curListNode != nullptr) {
        // doing left-children
        TreeNode* front = q.front();
        q.pop();
        front->left = new TreeNode(curListNode->data);
        q.push(front->left);
        curListNode = curListNode->next;

        // doing right-children
        if (curListNode != nullptr) {
            front->right = new TreeNode(curListNode->data);
            q.push(front->right);
            curListNode = curListNode->next;
        }
    }

    return root;
}

void preorder(TreeNode* root){
    
    if (root == nullptr) {
        return;
    }

    cout << root->data << ' ';
    preorder(root->left);
    preorder(root->right);
}


void inorder(TreeNode* root) {
    if (root == nullptr)
        return;

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);

}

void postorder(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

int main() {
    int n;
    vector<ListNode*> v;
    ListNode* head = new ListNode();
    int i = 0, num, total;
    int j = 0;
    cin >> num;

    for (j = 1; j <= num; j++) {
        cin >> total;

        if (cin >> n) {
            head->data = n;
            head->next = nullptr;
        }
        ListNode* cur = head;

        for (i = 1; i < total; i++) {
            if (cin >> n) {
                ListNode* newListNode = new ListNode(n);
                cur->next = newListNode;
                cur = cur->next;
            }
        }

        TreeNode* root = converListToBinaryTree(head);
        preorder(root);
        cout << '\n';
        inorder(root);
        cout << '\n';
        postorder(root);
        cout << '\n';

    }
}
